// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: engine_service.proto

package kurtosis_engine_rpc_api_bindings

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ==============================================================================================
//                                        Create Enclave
// ==============================================================================================
type CreateEnclaveArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The ID of the new Kurtosis Enclave
	EnclaveId string `protobuf:"bytes,1,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
	//The API container Docker image name which will be used to start the API container inside the Kurtosis Enclave
	ApiContainerImage string `protobuf:"bytes,2,opt,name=api_container_image,json=apiContainerImage,proto3" json:"api_container_image,omitempty"`
	//The API container log level
	ApiContainerLogLevel string `protobuf:"bytes,3,opt,name=api_container_log_level,json=apiContainerLogLevel,proto3" json:"api_container_log_level,omitempty"`
	//Whether network partitioning will be enabled or not on the new Kurtosis Enclave
	IsPartitioningEnabled bool `protobuf:"varint,4,opt,name=is_partitioning_enabled,json=isPartitioningEnabled,proto3" json:"is_partitioning_enabled,omitempty"`
	//If true, when a container is started in the enclave then all its used ports will also be made available on the host machine
	ShouldPublishAllPorts bool `protobuf:"varint,5,opt,name=should_publish_all_ports,json=shouldPublishAllPorts,proto3" json:"should_publish_all_ports,omitempty"`
}

func (x *CreateEnclaveArgs) Reset() {
	*x = CreateEnclaveArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnclaveArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnclaveArgs) ProtoMessage() {}

func (x *CreateEnclaveArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnclaveArgs.ProtoReflect.Descriptor instead.
func (*CreateEnclaveArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateEnclaveArgs) GetEnclaveId() string {
	if x != nil {
		return x.EnclaveId
	}
	return ""
}

func (x *CreateEnclaveArgs) GetApiContainerImage() string {
	if x != nil {
		return x.ApiContainerImage
	}
	return ""
}

func (x *CreateEnclaveArgs) GetApiContainerLogLevel() string {
	if x != nil {
		return x.ApiContainerLogLevel
	}
	return ""
}

func (x *CreateEnclaveArgs) GetIsPartitioningEnabled() bool {
	if x != nil {
		return x.IsPartitioningEnabled
	}
	return false
}

func (x *CreateEnclaveArgs) GetShouldPublishAllPorts() bool {
	if x != nil {
		return x.ShouldPublishAllPorts
	}
	return false
}

type CreateEnclaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The Docker network id that is part of the Kurtosis Enclave
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	//The Docker network CIDR
	NetworkCidr string `protobuf:"bytes,2,opt,name=network_cidr,json=networkCidr,proto3" json:"network_cidr,omitempty"`
	//The API container ID that is currently running in the Kurtosis Enclave
	ApiContainerId string `protobuf:"bytes,3,opt,name=api_container_id,json=apiContainerId,proto3" json:"api_container_id,omitempty"`
	//The IP of the interface on the host machine where the API container's port can be accessed
	ApiContainerIpInsideNetwork string `protobuf:"bytes,4,opt,name=api_container_ip_inside_network,json=apiContainerIpInsideNetwork,proto3" json:"api_container_ip_inside_network,omitempty"`
	//The API container Host IP address
	ApiContainerHostIp string `protobuf:"bytes,5,opt,name=api_container_host_ip,json=apiContainerHostIp,proto3" json:"api_container_host_ip,omitempty"`
	//The port number on the host machine where the API container can be reached
	ApiContainerHostPort string `protobuf:"bytes,6,opt,name=api_container_host_port,json=apiContainerHostPort,proto3" json:"api_container_host_port,omitempty"`
}

func (x *CreateEnclaveResponse) Reset() {
	*x = CreateEnclaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEnclaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEnclaveResponse) ProtoMessage() {}

func (x *CreateEnclaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEnclaveResponse.ProtoReflect.Descriptor instead.
func (*CreateEnclaveResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateEnclaveResponse) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateEnclaveResponse) GetNetworkCidr() string {
	if x != nil {
		return x.NetworkCidr
	}
	return ""
}

func (x *CreateEnclaveResponse) GetApiContainerId() string {
	if x != nil {
		return x.ApiContainerId
	}
	return ""
}

func (x *CreateEnclaveResponse) GetApiContainerIpInsideNetwork() string {
	if x != nil {
		return x.ApiContainerIpInsideNetwork
	}
	return ""
}

func (x *CreateEnclaveResponse) GetApiContainerHostIp() string {
	if x != nil {
		return x.ApiContainerHostIp
	}
	return ""
}

func (x *CreateEnclaveResponse) GetApiContainerHostPort() string {
	if x != nil {
		return x.ApiContainerHostPort
	}
	return ""
}

// ==============================================================================================
//                                          Get Enclave
// ==============================================================================================
type GetEnclaveArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The ID of the enclave to retrieve
	EnclaveId string `protobuf:"bytes,1,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
}

func (x *GetEnclaveArgs) Reset() {
	*x = GetEnclaveArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnclaveArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnclaveArgs) ProtoMessage() {}

func (x *GetEnclaveArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnclaveArgs.ProtoReflect.Descriptor instead.
func (*GetEnclaveArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetEnclaveArgs) GetEnclaveId() string {
	if x != nil {
		return x.EnclaveId
	}
	return ""
}

type GetEnclaveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The Docker network id that is part of the Kurtosis Enclave
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	//The Docker network IP
	NetworkIp string `protobuf:"bytes,2,opt,name=network_ip,json=networkIp,proto3" json:"network_ip,omitempty"`
	//The API container ID that is currently running in the Kurtosis Enclave
	ApiContainerId string `protobuf:"bytes,3,opt,name=api_container_id,json=apiContainerId,proto3" json:"api_container_id,omitempty"`
	//The IP of the interface on the host machine where the API container's port can be accessed
	ApiContainerIpInsideNetwork string `protobuf:"bytes,4,opt,name=api_container_ip_inside_network,json=apiContainerIpInsideNetwork,proto3" json:"api_container_ip_inside_network,omitempty"`
	//The API container Host IP address
	ApiContainerHostIp string `protobuf:"bytes,5,opt,name=api_container_host_ip,json=apiContainerHostIp,proto3" json:"api_container_host_ip,omitempty"`
	//The port number on the host machine where the API container can be reached
	ApiContainerHostPort string `protobuf:"bytes,6,opt,name=api_container_host_port,json=apiContainerHostPort,proto3" json:"api_container_host_port,omitempty"`
}

func (x *GetEnclaveResponse) Reset() {
	*x = GetEnclaveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEnclaveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEnclaveResponse) ProtoMessage() {}

func (x *GetEnclaveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEnclaveResponse.ProtoReflect.Descriptor instead.
func (*GetEnclaveResponse) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetEnclaveResponse) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *GetEnclaveResponse) GetNetworkIp() string {
	if x != nil {
		return x.NetworkIp
	}
	return ""
}

func (x *GetEnclaveResponse) GetApiContainerId() string {
	if x != nil {
		return x.ApiContainerId
	}
	return ""
}

func (x *GetEnclaveResponse) GetApiContainerIpInsideNetwork() string {
	if x != nil {
		return x.ApiContainerIpInsideNetwork
	}
	return ""
}

func (x *GetEnclaveResponse) GetApiContainerHostIp() string {
	if x != nil {
		return x.ApiContainerHostIp
	}
	return ""
}

func (x *GetEnclaveResponse) GetApiContainerHostPort() string {
	if x != nil {
		return x.ApiContainerHostPort
	}
	return ""
}

// ==============================================================================================
//                                       Destroy Enclave
// ==============================================================================================
type DestroyEnclaveArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//The ID of the new Kurtosis Enclave
	EnclaveId string `protobuf:"bytes,1,opt,name=enclave_id,json=enclaveId,proto3" json:"enclave_id,omitempty"`
}

func (x *DestroyEnclaveArgs) Reset() {
	*x = DestroyEnclaveArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_engine_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DestroyEnclaveArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DestroyEnclaveArgs) ProtoMessage() {}

func (x *DestroyEnclaveArgs) ProtoReflect() protoreflect.Message {
	mi := &file_engine_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DestroyEnclaveArgs.ProtoReflect.Descriptor instead.
func (*DestroyEnclaveArgs) Descriptor() ([]byte, []int) {
	return file_engine_service_proto_rawDescGZIP(), []int{4}
}

func (x *DestroyEnclaveArgs) GetEnclaveId() string {
	if x != nil {
		return x.EnclaveId
	}
	return ""
}

var File_engine_service_proto protoreflect.FileDescriptor

var file_engine_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61,
	0x70, 0x69, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x8a, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x17, 0x69,
	0x73, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x22, 0xb3, 0x02, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x69, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x70, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x2f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6c, 0x61, 0x76,
	0x65, 0x49, 0x64, 0x22, 0xac, 0x02, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x1f, 0x61, 0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x70, 0x69,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x31, 0x0a, 0x15, 0x61, 0x70, 0x69, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x61, 0x70, 0x69, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x70, 0x12, 0x35, 0x0a, 0x17, 0x61,
	0x70, 0x69, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61, 0x70,
	0x69, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f, 0x79, 0x45, 0x6e, 0x63,
	0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x6c,
	0x61, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e,
	0x63, 0x6c, 0x61, 0x76, 0x65, 0x49, 0x64, 0x32, 0xfc, 0x01, 0x0a, 0x0d, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x53, 0x0a, 0x0d, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1d, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x21, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x63,
	0x6c, 0x61, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1a, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63,
	0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x44, 0x65,
	0x73, 0x74, 0x72, 0x6f, 0x79, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x12, 0x1e, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x72, 0x6f,
	0x79, 0x45, 0x6e, 0x63, 0x6c, 0x61, 0x76, 0x65, 0x41, 0x72, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x5a, 0x5a, 0x58, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x2d, 0x74, 0x65,
	0x63, 0x68, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x2d, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x6c, 0x69, 0x62, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e,
	0x67, 0x2f, 0x6b, 0x75, 0x72, 0x74, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x5f, 0x72, 0x70, 0x63, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_engine_service_proto_rawDescOnce sync.Once
	file_engine_service_proto_rawDescData = file_engine_service_proto_rawDesc
)

func file_engine_service_proto_rawDescGZIP() []byte {
	file_engine_service_proto_rawDescOnce.Do(func() {
		file_engine_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_engine_service_proto_rawDescData)
	})
	return file_engine_service_proto_rawDescData
}

var file_engine_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_engine_service_proto_goTypes = []interface{}{
	(*CreateEnclaveArgs)(nil),     // 0: engine_api.CreateEnclaveArgs
	(*CreateEnclaveResponse)(nil), // 1: engine_api.CreateEnclaveResponse
	(*GetEnclaveArgs)(nil),        // 2: engine_api.GetEnclaveArgs
	(*GetEnclaveResponse)(nil),    // 3: engine_api.GetEnclaveResponse
	(*DestroyEnclaveArgs)(nil),    // 4: engine_api.DestroyEnclaveArgs
	(*emptypb.Empty)(nil),         // 5: google.protobuf.Empty
}
var file_engine_service_proto_depIdxs = []int32{
	0, // 0: engine_api.EngineService.CreateEnclave:input_type -> engine_api.CreateEnclaveArgs
	2, // 1: engine_api.EngineService.GetEnclave:input_type -> engine_api.GetEnclaveArgs
	4, // 2: engine_api.EngineService.DestroyEnclave:input_type -> engine_api.DestroyEnclaveArgs
	1, // 3: engine_api.EngineService.CreateEnclave:output_type -> engine_api.CreateEnclaveResponse
	3, // 4: engine_api.EngineService.GetEnclave:output_type -> engine_api.GetEnclaveResponse
	5, // 5: engine_api.EngineService.DestroyEnclave:output_type -> google.protobuf.Empty
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_engine_service_proto_init() }
func file_engine_service_proto_init() {
	if File_engine_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_engine_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnclaveArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEnclaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnclaveArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEnclaveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_engine_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DestroyEnclaveArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_engine_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_engine_service_proto_goTypes,
		DependencyIndexes: file_engine_service_proto_depIdxs,
		MessageInfos:      file_engine_service_proto_msgTypes,
	}.Build()
	File_engine_service_proto = out.File
	file_engine_service_proto_rawDesc = nil
	file_engine_service_proto_goTypes = nil
	file_engine_service_proto_depIdxs = nil
}
