// source: engine_service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.engine_api.CreateEnclaveArgs', null, global);
goog.exportSymbol('proto.engine_api.CreateEnclaveResponse', null, global);
goog.exportSymbol('proto.engine_api.DestroyEnclaveArgs', null, global);
goog.exportSymbol('proto.engine_api.EnclaveAPIContainerInfo', null, global);
goog.exportSymbol('proto.engine_api.EnclaveAPIContainerStatus', null, global);
goog.exportSymbol('proto.engine_api.EnclaveContainersStatus', null, global);
goog.exportSymbol('proto.engine_api.EnclaveInfo', null, global);
goog.exportSymbol('proto.engine_api.GetEnclavesResponse', null, global);
goog.exportSymbol('proto.engine_api.GetEngineInfoResponse', null, global);
goog.exportSymbol('proto.engine_api.StopEnclaveArgs', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.engine_api.GetEngineInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.engine_api.GetEngineInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.engine_api.GetEngineInfoResponse.displayName = 'proto.engine_api.GetEngineInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.engine_api.CreateEnclaveArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.engine_api.CreateEnclaveArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.engine_api.CreateEnclaveArgs.displayName = 'proto.engine_api.CreateEnclaveArgs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.engine_api.CreateEnclaveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.engine_api.CreateEnclaveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.engine_api.CreateEnclaveResponse.displayName = 'proto.engine_api.CreateEnclaveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.engine_api.EnclaveAPIContainerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.engine_api.EnclaveAPIContainerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.engine_api.EnclaveAPIContainerInfo.displayName = 'proto.engine_api.EnclaveAPIContainerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.engine_api.EnclaveInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.engine_api.EnclaveInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.engine_api.EnclaveInfo.displayName = 'proto.engine_api.EnclaveInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.engine_api.GetEnclavesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.engine_api.GetEnclavesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.engine_api.GetEnclavesResponse.displayName = 'proto.engine_api.GetEnclavesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.engine_api.StopEnclaveArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.engine_api.StopEnclaveArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.engine_api.StopEnclaveArgs.displayName = 'proto.engine_api.StopEnclaveArgs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.engine_api.DestroyEnclaveArgs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.engine_api.DestroyEnclaveArgs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.engine_api.DestroyEnclaveArgs.displayName = 'proto.engine_api.DestroyEnclaveArgs';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.engine_api.GetEngineInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.engine_api.GetEngineInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.engine_api.GetEngineInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.GetEngineInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    engineApiVersion: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.engine_api.GetEngineInfoResponse}
 */
proto.engine_api.GetEngineInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.engine_api.GetEngineInfoResponse;
  return proto.engine_api.GetEngineInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.engine_api.GetEngineInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.engine_api.GetEngineInfoResponse}
 */
proto.engine_api.GetEngineInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEngineApiVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.engine_api.GetEngineInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.engine_api.GetEngineInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.engine_api.GetEngineInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.GetEngineInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEngineApiVersion();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string engine_api_version = 1;
 * @return {string}
 */
proto.engine_api.GetEngineInfoResponse.prototype.getEngineApiVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.GetEngineInfoResponse} returns this
 */
proto.engine_api.GetEngineInfoResponse.prototype.setEngineApiVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.engine_api.CreateEnclaveArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.engine_api.CreateEnclaveArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.engine_api.CreateEnclaveArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.CreateEnclaveArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    enclaveId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    apiContainerImage: jspb.Message.getFieldWithDefault(msg, 2, ""),
    apiContainerLogLevel: jspb.Message.getFieldWithDefault(msg, 3, ""),
    isPartitioningEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    shouldPublishAllPorts: jspb.Message.getBooleanFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.engine_api.CreateEnclaveArgs}
 */
proto.engine_api.CreateEnclaveArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.engine_api.CreateEnclaveArgs;
  return proto.engine_api.CreateEnclaveArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.engine_api.CreateEnclaveArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.engine_api.CreateEnclaveArgs}
 */
proto.engine_api.CreateEnclaveArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnclaveId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiContainerImage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setApiContainerLogLevel(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPartitioningEnabled(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShouldPublishAllPorts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.engine_api.CreateEnclaveArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.engine_api.CreateEnclaveArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.engine_api.CreateEnclaveArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.CreateEnclaveArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnclaveId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getApiContainerImage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getApiContainerLogLevel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIsPartitioningEnabled();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getShouldPublishAllPorts();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string enclave_id = 1;
 * @return {string}
 */
proto.engine_api.CreateEnclaveArgs.prototype.getEnclaveId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.CreateEnclaveArgs} returns this
 */
proto.engine_api.CreateEnclaveArgs.prototype.setEnclaveId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string api_container_image = 2;
 * @return {string}
 */
proto.engine_api.CreateEnclaveArgs.prototype.getApiContainerImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.CreateEnclaveArgs} returns this
 */
proto.engine_api.CreateEnclaveArgs.prototype.setApiContainerImage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string api_container_log_level = 3;
 * @return {string}
 */
proto.engine_api.CreateEnclaveArgs.prototype.getApiContainerLogLevel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.CreateEnclaveArgs} returns this
 */
proto.engine_api.CreateEnclaveArgs.prototype.setApiContainerLogLevel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool is_partitioning_enabled = 4;
 * @return {boolean}
 */
proto.engine_api.CreateEnclaveArgs.prototype.getIsPartitioningEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.engine_api.CreateEnclaveArgs} returns this
 */
proto.engine_api.CreateEnclaveArgs.prototype.setIsPartitioningEnabled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool should_publish_all_ports = 5;
 * @return {boolean}
 */
proto.engine_api.CreateEnclaveArgs.prototype.getShouldPublishAllPorts = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.engine_api.CreateEnclaveArgs} returns this
 */
proto.engine_api.CreateEnclaveArgs.prototype.setShouldPublishAllPorts = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.engine_api.CreateEnclaveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.engine_api.CreateEnclaveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.engine_api.CreateEnclaveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.CreateEnclaveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    enclaveInfo: (f = msg.getEnclaveInfo()) && proto.engine_api.EnclaveInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.engine_api.CreateEnclaveResponse}
 */
proto.engine_api.CreateEnclaveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.engine_api.CreateEnclaveResponse;
  return proto.engine_api.CreateEnclaveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.engine_api.CreateEnclaveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.engine_api.CreateEnclaveResponse}
 */
proto.engine_api.CreateEnclaveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.engine_api.EnclaveInfo;
      reader.readMessage(value,proto.engine_api.EnclaveInfo.deserializeBinaryFromReader);
      msg.setEnclaveInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.engine_api.CreateEnclaveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.engine_api.CreateEnclaveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.engine_api.CreateEnclaveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.CreateEnclaveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnclaveInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.engine_api.EnclaveInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional EnclaveInfo enclave_info = 1;
 * @return {?proto.engine_api.EnclaveInfo}
 */
proto.engine_api.CreateEnclaveResponse.prototype.getEnclaveInfo = function() {
  return /** @type{?proto.engine_api.EnclaveInfo} */ (
    jspb.Message.getWrapperField(this, proto.engine_api.EnclaveInfo, 1));
};


/**
 * @param {?proto.engine_api.EnclaveInfo|undefined} value
 * @return {!proto.engine_api.CreateEnclaveResponse} returns this
*/
proto.engine_api.CreateEnclaveResponse.prototype.setEnclaveInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.engine_api.CreateEnclaveResponse} returns this
 */
proto.engine_api.CreateEnclaveResponse.prototype.clearEnclaveInfo = function() {
  return this.setEnclaveInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.engine_api.CreateEnclaveResponse.prototype.hasEnclaveInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.engine_api.EnclaveAPIContainerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.engine_api.EnclaveAPIContainerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.EnclaveAPIContainerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    containerId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ipInsideEnclave: jspb.Message.getFieldWithDefault(msg, 2, ""),
    portInsideEnclave: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ipOnHostMachine: jspb.Message.getFieldWithDefault(msg, 4, ""),
    portOnHostMachine: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.engine_api.EnclaveAPIContainerInfo}
 */
proto.engine_api.EnclaveAPIContainerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.engine_api.EnclaveAPIContainerInfo;
  return proto.engine_api.EnclaveAPIContainerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.engine_api.EnclaveAPIContainerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.engine_api.EnclaveAPIContainerInfo}
 */
proto.engine_api.EnclaveAPIContainerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainerId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpInsideEnclave(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPortInsideEnclave(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIpOnHostMachine(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPortOnHostMachine(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.engine_api.EnclaveAPIContainerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.engine_api.EnclaveAPIContainerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.EnclaveAPIContainerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContainerId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIpInsideEnclave();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPortInsideEnclave();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getIpOnHostMachine();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPortOnHostMachine();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string container_id = 1;
 * @return {string}
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.getContainerId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.EnclaveAPIContainerInfo} returns this
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.setContainerId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ip_inside_enclave = 2;
 * @return {string}
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.getIpInsideEnclave = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.EnclaveAPIContainerInfo} returns this
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.setIpInsideEnclave = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 port_inside_enclave = 3;
 * @return {number}
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.getPortInsideEnclave = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.engine_api.EnclaveAPIContainerInfo} returns this
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.setPortInsideEnclave = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string ip_on_host_machine = 4;
 * @return {string}
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.getIpOnHostMachine = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.EnclaveAPIContainerInfo} returns this
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.setIpOnHostMachine = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint32 port_on_host_machine = 5;
 * @return {number}
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.getPortOnHostMachine = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.engine_api.EnclaveAPIContainerInfo} returns this
 */
proto.engine_api.EnclaveAPIContainerInfo.prototype.setPortOnHostMachine = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.engine_api.EnclaveInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.engine_api.EnclaveInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.engine_api.EnclaveInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.EnclaveInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    enclaveId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    networkId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    networkCidr: jspb.Message.getFieldWithDefault(msg, 3, ""),
    containersStatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    apiContainerStatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    apiContainerInfo: (f = msg.getApiContainerInfo()) && proto.engine_api.EnclaveAPIContainerInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.engine_api.EnclaveInfo}
 */
proto.engine_api.EnclaveInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.engine_api.EnclaveInfo;
  return proto.engine_api.EnclaveInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.engine_api.EnclaveInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.engine_api.EnclaveInfo}
 */
proto.engine_api.EnclaveInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnclaveId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetworkCidr(value);
      break;
    case 4:
      var value = /** @type {!proto.engine_api.EnclaveContainersStatus} */ (reader.readEnum());
      msg.setContainersStatus(value);
      break;
    case 5:
      var value = /** @type {!proto.engine_api.EnclaveAPIContainerStatus} */ (reader.readEnum());
      msg.setApiContainerStatus(value);
      break;
    case 6:
      var value = new proto.engine_api.EnclaveAPIContainerInfo;
      reader.readMessage(value,proto.engine_api.EnclaveAPIContainerInfo.deserializeBinaryFromReader);
      msg.setApiContainerInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.engine_api.EnclaveInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.engine_api.EnclaveInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.engine_api.EnclaveInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.EnclaveInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnclaveId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetworkId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNetworkCidr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContainersStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getApiContainerStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getApiContainerInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.engine_api.EnclaveAPIContainerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string enclave_id = 1;
 * @return {string}
 */
proto.engine_api.EnclaveInfo.prototype.getEnclaveId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.EnclaveInfo} returns this
 */
proto.engine_api.EnclaveInfo.prototype.setEnclaveId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string network_id = 2;
 * @return {string}
 */
proto.engine_api.EnclaveInfo.prototype.getNetworkId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.EnclaveInfo} returns this
 */
proto.engine_api.EnclaveInfo.prototype.setNetworkId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string network_cidr = 3;
 * @return {string}
 */
proto.engine_api.EnclaveInfo.prototype.getNetworkCidr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.EnclaveInfo} returns this
 */
proto.engine_api.EnclaveInfo.prototype.setNetworkCidr = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional EnclaveContainersStatus containers_status = 4;
 * @return {!proto.engine_api.EnclaveContainersStatus}
 */
proto.engine_api.EnclaveInfo.prototype.getContainersStatus = function() {
  return /** @type {!proto.engine_api.EnclaveContainersStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.engine_api.EnclaveContainersStatus} value
 * @return {!proto.engine_api.EnclaveInfo} returns this
 */
proto.engine_api.EnclaveInfo.prototype.setContainersStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional EnclaveAPIContainerStatus api_container_status = 5;
 * @return {!proto.engine_api.EnclaveAPIContainerStatus}
 */
proto.engine_api.EnclaveInfo.prototype.getApiContainerStatus = function() {
  return /** @type {!proto.engine_api.EnclaveAPIContainerStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.engine_api.EnclaveAPIContainerStatus} value
 * @return {!proto.engine_api.EnclaveInfo} returns this
 */
proto.engine_api.EnclaveInfo.prototype.setApiContainerStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional EnclaveAPIContainerInfo api_container_info = 6;
 * @return {?proto.engine_api.EnclaveAPIContainerInfo}
 */
proto.engine_api.EnclaveInfo.prototype.getApiContainerInfo = function() {
  return /** @type{?proto.engine_api.EnclaveAPIContainerInfo} */ (
    jspb.Message.getWrapperField(this, proto.engine_api.EnclaveAPIContainerInfo, 6));
};


/**
 * @param {?proto.engine_api.EnclaveAPIContainerInfo|undefined} value
 * @return {!proto.engine_api.EnclaveInfo} returns this
*/
proto.engine_api.EnclaveInfo.prototype.setApiContainerInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.engine_api.EnclaveInfo} returns this
 */
proto.engine_api.EnclaveInfo.prototype.clearApiContainerInfo = function() {
  return this.setApiContainerInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.engine_api.EnclaveInfo.prototype.hasApiContainerInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.engine_api.GetEnclavesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.engine_api.GetEnclavesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.engine_api.GetEnclavesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.GetEnclavesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    enclaveInfoMap: (f = msg.getEnclaveInfoMap()) ? f.toObject(includeInstance, proto.engine_api.EnclaveInfo.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.engine_api.GetEnclavesResponse}
 */
proto.engine_api.GetEnclavesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.engine_api.GetEnclavesResponse;
  return proto.engine_api.GetEnclavesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.engine_api.GetEnclavesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.engine_api.GetEnclavesResponse}
 */
proto.engine_api.GetEnclavesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = msg.getEnclaveInfoMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.engine_api.EnclaveInfo.deserializeBinaryFromReader, "", new proto.engine_api.EnclaveInfo());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.engine_api.GetEnclavesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.engine_api.GetEnclavesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.engine_api.GetEnclavesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.GetEnclavesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnclaveInfoMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(1, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.engine_api.EnclaveInfo.serializeBinaryToWriter);
  }
};


/**
 * map<string, EnclaveInfo> enclave_info = 1;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.engine_api.EnclaveInfo>}
 */
proto.engine_api.GetEnclavesResponse.prototype.getEnclaveInfoMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.engine_api.EnclaveInfo>} */ (
      jspb.Message.getMapField(this, 1, opt_noLazyCreate,
      proto.engine_api.EnclaveInfo));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.engine_api.GetEnclavesResponse} returns this
 */
proto.engine_api.GetEnclavesResponse.prototype.clearEnclaveInfoMap = function() {
  this.getEnclaveInfoMap().clear();
  return this;};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.engine_api.StopEnclaveArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.engine_api.StopEnclaveArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.engine_api.StopEnclaveArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.StopEnclaveArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    enclaveId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.engine_api.StopEnclaveArgs}
 */
proto.engine_api.StopEnclaveArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.engine_api.StopEnclaveArgs;
  return proto.engine_api.StopEnclaveArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.engine_api.StopEnclaveArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.engine_api.StopEnclaveArgs}
 */
proto.engine_api.StopEnclaveArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnclaveId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.engine_api.StopEnclaveArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.engine_api.StopEnclaveArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.engine_api.StopEnclaveArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.StopEnclaveArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnclaveId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string enclave_id = 1;
 * @return {string}
 */
proto.engine_api.StopEnclaveArgs.prototype.getEnclaveId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.StopEnclaveArgs} returns this
 */
proto.engine_api.StopEnclaveArgs.prototype.setEnclaveId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.engine_api.DestroyEnclaveArgs.prototype.toObject = function(opt_includeInstance) {
  return proto.engine_api.DestroyEnclaveArgs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.engine_api.DestroyEnclaveArgs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.DestroyEnclaveArgs.toObject = function(includeInstance, msg) {
  var f, obj = {
    enclaveId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.engine_api.DestroyEnclaveArgs}
 */
proto.engine_api.DestroyEnclaveArgs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.engine_api.DestroyEnclaveArgs;
  return proto.engine_api.DestroyEnclaveArgs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.engine_api.DestroyEnclaveArgs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.engine_api.DestroyEnclaveArgs}
 */
proto.engine_api.DestroyEnclaveArgs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnclaveId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.engine_api.DestroyEnclaveArgs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.engine_api.DestroyEnclaveArgs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.engine_api.DestroyEnclaveArgs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.engine_api.DestroyEnclaveArgs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnclaveId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string enclave_id = 1;
 * @return {string}
 */
proto.engine_api.DestroyEnclaveArgs.prototype.getEnclaveId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.engine_api.DestroyEnclaveArgs} returns this
 */
proto.engine_api.DestroyEnclaveArgs.prototype.setEnclaveId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.engine_api.EnclaveContainersStatus = {
  ENCLAVECONTAINERSSTATUS_EMPTY: 0,
  ENCLAVECONTAINERSSTATUS_RUNNING: 1,
  ENCLAVECONTAINERSSTATUS_STOPPED: 2
};

/**
 * @enum {number}
 */
proto.engine_api.EnclaveAPIContainerStatus = {
  ENCLAVEAPICONTAINERSTATUS_NONEXISTENT: 0,
  ENCLAVEAPICONTAINERSTATUS_RUNNING: 1,
  ENCLAVEAPICONTAINERSTATUS_STOPPED: 2
};

goog.object.extend(exports, proto.engine_api);
