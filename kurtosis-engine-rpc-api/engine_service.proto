syntax = "proto3";
package engine_api;
// NOTE: It sucks that we have this Go-specific logic inside this file (which should be language-agnostic). However, the Protobuf team have
// taken a hard stance on this being the way it should be done, so we have to do it this way.
option go_package = "github.com/kurtosis-tech/kurtosis-engine-api-lib/golang/kurtosis_engine_rpc_api_bindings";

import "google/protobuf/empty.proto";

service EngineService {
  // Endpoint for getting information about the engine, which is also what we use to verify that the engine has become available
  rpc GetEngineInfo(google.protobuf.Empty) returns (GetEngineInfoResponse) {};
  // Creates a new Kurtosis Enclave
  rpc CreateEnclave(CreateEnclaveArgs) returns (CreateEnclaveResponse) {};
  // Returns information about the existing enclaves
  rpc GetEnclaves(google.protobuf.Empty) returns (GetEnclavesResponse) {};
  // Stops all containers in an enclave
  rpc StopEnclave(StopEnclaveArgs) returns (google.protobuf.Empty) {};
  // Destroys an enclave, removing all artifacts associated with it
  rpc DestroyEnclave(DestroyEnclaveArgs) returns (google.protobuf.Empty) {};
}

// ==============================================================================================
//                                        Get Engine Info
// ==============================================================================================
message GetEngineInfoResponse {
  // Version of the engine API that this server implements
  string engine_api_version = 1;
  // Version of the engine server
  string engine_version = 2;
}

// ==============================================================================================
//                                        Create Enclave
// ==============================================================================================
message CreateEnclaveArgs {
  //The ID of the new Kurtosis Enclave
  string enclave_id = 1;
  //The API container Docker image name which will be used to start the API container inside the Kurtosis Enclave
  string api_container_image = 2;
  //The API container log level
  string api_container_log_level = 3;
  //Whether network partitioning will be enabled or not on the new Kurtosis Enclave
  bool is_partitioning_enabled = 4;
  //If true, when a container is started in the enclave then all its used ports will also be made available on the host machine
  bool should_publish_all_ports = 5;
}

message CreateEnclaveResponse {
  //All the enclave information inside this object
  EnclaveInfo enclave_info = 1;
}

// ==============================================================================================
//                                            Get Enclaves
// ==============================================================================================
// Status of the containers in the enclave
// NOTE: We have to prefix the enum values with the enum name due to the way Protobuf enum valuee uniqueness works
enum EnclaveContainersStatus {
  // The enclave has been created, but there are no containers inside it
  EnclaveContainersStatus_EMPTY = 0;

  // One or more containers are running in the enclave (which may or may not include the API container, depending on if the user was manually stopping/removing containers)
  EnclaveContainersStatus_RUNNING = 1;

  // There are >= 1 container in the enclave, but they're all stopped
  EnclaveContainersStatus_STOPPED = 2;
}

// NOTE: We have to prefix the enum values with the enum name due to the way Protobuf enum value uniqueness works
enum EnclaveAPIContainerStatus {
  // No API container exists in the enclave
  // This is the only valid value when the enclave containers status is "EMPTY"
  EnclaveAPIContainerStatus_NONEXISTENT = 0;

  // An API container exists and is running
  // NOTE: this does NOT say that the server inside the API container is available, because checking if it's available requires making a call to the API container
  //  If we have a lot of API containers, we'd be making tons of calls
  EnclaveAPIContainerStatus_RUNNING = 1;

  // An API container exists, but isn't running
  EnclaveAPIContainerStatus_STOPPED = 2;
}

message EnclaveAPIContainerInfo {
  //The container engine ID of the API container
  string container_id = 1;
  // The IP inside the enclave network of the API container (i.e. how services inside the network can reach the API container)
  string ip_inside_enclave = 2;
  // The port inside the enclave network that the API container is listening on
  uint32 port_inside_enclave = 3;
  // The interface IP on the container engine host machine where the API container can be reached
  string ip_on_host_machine = 4;
  // The port on the container engine host machine where the API container can be reached
  uint32 port_on_host_machine = 5;
}

// Enclaves are defined by a network in the container system, which is why there's a bunch of network information here
message EnclaveInfo {
  // ID of the enclave
  string enclave_id = 1;

  // The ID of the enclave's network in the container engine
  string network_id = 2;

  //The CIDR of the enclave's network in the container engine
  string network_cidr = 3;

  // State of all containers in the enclave
  EnclaveContainersStatus containers_status = 4;

  // State specifically of the API container
  EnclaveAPIContainerStatus api_container_status = 5;

  // NOTE: Will not be present if the API container status is "NONEXISTENT"!!
  EnclaveAPIContainerInfo api_container_info = 6;
}

message GetEnclavesResponse {
  // Mapping of enclave_id -> info_about_enclave
  map<string, EnclaveInfo> enclave_info = 1;
}

// ==============================================================================================
//                                       Destroy Enclave
// ==============================================================================================
message StopEnclaveArgs {
  //The ID of the Kurtosis enclave to stop
  string enclave_id = 1;
}



// ==============================================================================================
//                                       Destroy Enclave
// ==============================================================================================
message DestroyEnclaveArgs {
  //The ID of the Kurtosis enclave to destroy
  string enclave_id = 1;
}
